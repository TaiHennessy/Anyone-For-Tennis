@model IEnumerable<AnyoneForTennis.Models.Schedule>

@{
    ViewData["Title"] = "All Schedules";
    var userId = User?.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value; // Get logged-in user ID
}

    <div class="container">
        <h2 class="text-center mb-4">Upcoming Schedules</h2>

        <!-- Search and Filter Section -->
        <div class="row mb-4">
            <div class="col-md-6">
                <input type="text" id="coachSearch" class="form-control" placeholder="Search by coach..." onkeyup="filterSchedules()">
            </div>
            <div class="col-md-6">
                <select id="locationSort" class="form-control" onchange="filterSchedules()">
                    <option value="">Sort by location...</option>
                    @foreach (var location in Model.Select(s => s.Location.Trim().ToUpper()).Distinct().OrderBy(l => l))
                    {
                        <option value="@location">@location</option>
                    }
                </select>
            </div>
        </div>

        @if (Model != null && Model.Any())
        {
            <div class="row" id="scheduleList">
                @foreach (var schedule in Model.OrderBy(s => s.SchedulePlus?.DateTime)) // Sort by DateTime
                {
                    <div class="col-md-6 mb-4 schedule-card" data-coach="@schedule.SchedulePlus?.Coach?.FullName" data-location="@schedule.Location.Trim().ToUpper()">
                        <div class="card shadow-sm" style="background-color: @GetRandomPastelColor();">
                            <div class="card-body">
                                <h5 class="card-title">@schedule.Name</h5>
                                <p class="card-text">
                                    <strong>Location:</strong> @schedule.Location<br />
                                    <strong>Description:</strong> @schedule.Description<br />

                                    @if (schedule.SchedulePlus != null)
                                    {
                                        <strong>Date:</strong> @schedule.SchedulePlus.DateTime.ToString("dd MMM yyyy | hh:mm tt")
                                        <br />
                                        <strong>Coach:</strong> @schedule.SchedulePlus.Coach?.FullName
                                    }
                                    else
                                    {
                                        <span class="text-danger">No schedule details available.</span>
                                    }
                                </p>

                                <a href="@Url.Action("Details", "Schedules", new { id = schedule.ScheduleId })" class="btn btn-primary">View Details</a>

                                @if (User.Identity.IsAuthenticated && userId != null)
                                {
                                    <!-- Enroll button for logged-in users -->
                                    <button type="button" class="btn btn-success mt-2" onclick="enroll(@schedule.ScheduleId)">Enroll</button>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="alert alert-warning text-center">
                No schedules available.
            </div>
        }
    </div>



    <!-- Modal for Enrollment Popup -->
    <div class="modal fade" id="enrollmentModal" tabindex="-1" role="dialog" aria-labelledby="enrollmentModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-body" id="enrollmentModalBody"></div>
                <div class="modal-footer" id="enrollmentModalFooter">

                    <a id="scheduleLink" class="btn btn-primary" style="display: none;">See my schedule</a>
                </div>
            </div>
        </div>
    </div>
@section Scripts {
    <script>
        function enroll(scheduleId) {
            $.ajax({
                url: '/Schedules/Enroll',
                type: 'POST',
                data: {
                    scheduleId: scheduleId,
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                },
                success: function (response) {
                    $('#enrollmentModalLabel').text(response.isSuccess ? 'Successfully Enrolled' : 'Enrollment Failed');
                    $('#enrollmentModalBody').text(response.message);
                    if (response.isSuccess) {
                        $('#scheduleLink').attr('href', window.location.origin).show();
                    } else {
                        $('#scheduleLink').hide();
                    }
                    $('#enrollmentModal').modal('show');
                },
                error: function () {
                    alert('An error occurred while enrolling. Please try again.');
                }
            });
        }

        function filterSchedules() {
            var input = document.getElementById("coachSearch").value.toUpperCase();
            var location = document.getElementById("locationSort").value.toUpperCase();
            var scheduleCards = document.getElementsByClassName("schedule-card");

            for (var i = 0; i < scheduleCards.length; i++) {
                var card = scheduleCards[i];
                var coachName = card.getAttribute("data-coach").toUpperCase();
                var scheduleLocation = card.getAttribute("data-location").toUpperCase();

                if ((coachName.indexOf(input) > -1 || input === "") && (scheduleLocation === location || location === "")) {
                    card.style.display = "block";
                } else {
                    card.style.display = "none";
                }
            }
        }
    </script>
}

@functions {
    private string GetRandomPastelColor()
    {
        var colors = new[] { "#FFB3BA", "#FFDFBA", "#FFFFBA", "#BAFFC9", "#BAE1FF", "#C2CFFF", "#C6E2FF", "#D1F2EB" };
        Random rand = new Random();
        return colors[rand.Next(colors.Length)];
    }
}
